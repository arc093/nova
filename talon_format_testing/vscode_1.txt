#help gui windows that help user find commands        
help alphabet: user.help_list("user.letter"),
help symbols: user.help_list("user.symbol_key"),
help numbers: user.help_list("user.number_key"),
help punctuation: user.help_list("user.punctuation"),
help modifier: user.help_list("user.modifier_key"),
help special keys: user.help_list("user.special_key"),
help function keys: user.help_list("user.function_key"),
help arrows: user.help_list("user.arrow_key"),
(help formatters | help format | format help):
    user.help_formatters(user.get_formatters_words())
help context$: user.help_context(),
help active$: user.help_context_enabled(),
help search <user.text>$: user.help_search(text),
help context {user.help_contexts}$: user.help_selected_context(help_contexts),
help help: user.help_search("help"),
help scope$: user.help_scope_toggle(),
# Zoom
zoom in: edit.zoom_in(),
zoom out: edit.zoom_out(),
zoom reset: edit.zoom_reset(),

# Searching
find it: edit.find(),
next one: edit.find_next(),

go to sleep: actions.speech.disable()

# Navigation

# The reason for these spoken forms is that "page up" and "page down" are globally defined as keys.
scroll up: edit.page_up(),
scroll down: edit.page_down(),

go word left: edit.word_left(),
go word right: edit.word_right(),

go left: edit.left(),
go right: edit.right(),
go up: edit.up(),
go down: edit.down(),

go line start | head: edit.line_start(),
go line end | tail: edit.line_end(),

go way left:
    edit.line_start()
    edit.line_start(),
go way right: edit.line_end(),
go way up: edit.file_start(),
go way down: edit.file_end(),

go top: edit.file_start(),
go bottom: edit.file_end(),

go page up: edit.page_up(),
go page down: edit.page_down(),

# Selecting
select all: edit.select_all(),
select line: edit.select_line(),
select line start: user.select_line_start(),
select line end: user.select_line_end(),

select left: edit.extend_left(),
select right: edit.extend_right(),
select up: edit.extend_line_up(),
select down: edit.extend_line_down(),

select word: edit.select_word(),
select word left: edit.extend_word_left(),
select word right: edit.extend_word_right(),

select way left: edit.extend_line_start(),
select way right: edit.extend_line_end(),
select way up: edit.extend_file_start(),
select way down: edit.extend_file_end(),

# Indentation
indent [more]: edit.indent_more(),
(indent less | out dent): edit.indent_less(),

# Delete
clear all: user.delete_all(),
clear line: edit.delete_line(),
clear line start: user.delete_line_start(),
clear line end: user.delete_line_end(),
clear left: edit.delete(),
clear right: user.delete_right(),

clear up:
    edit.extend_line_up()
    edit.delete(),

clear down:
    edit.extend_line_down()
    edit.delete(),

clear word: edit.delete_word(),

clear word left:
    edit.extend_word_left()
    edit.delete(),

clear word right:
    edit.extend_word_right()
    edit.delete(),

clear way left:
    edit.extend_line_start()
    edit.delete(),

clear way right:
    edit.extend_line_end()
    edit.delete(),

clear way up:
    edit.extend_file_start()
    edit.delete(),

clear way down:
    edit.extend_file_end()
    edit.delete(),

# Copy
copy that: edit.copy(),
copy all: user.copy_all(),
copy line: user.copy_line(),
copy line start: user.copy_line_start(),
copy line end: user.copy_line_end(),
copy word: user.copy_word(),
copy word left: user.copy_word_left(),
copy word right: user.copy_word_right(),

#to do: do we want these variants, seem to conflict
# copy left:
#      edit.extend_left()
#      edit.copy(),
# copy right:
#     edit.extend_right()
#     edit.copy(),
# copy up:
#     edit.extend_up()
#     edit.copy(),
# copy down:
#     edit.extend_down()
#     edit.copy(),

# Cut
cut that: edit.cut(),
cut all: user.cut_all(),
cut line: user.cut_line(),
cut line start: user.cut_line_start(),
cut line end: user.cut_line_end(),
cut word: user.cut_word(),
cut word left: user.cut_word_left(),
cut word right: user.cut_word_right(),


# Paste
(pace | paste) that: edit.paste(),
(pace | paste) enter:
    edit.paste()
    key(enter),
paste match: edit.paste_match_style(),
(pace | paste) all: user.paste_all(),
(pace | paste) line: user.paste_line(),
(pace | paste) line start: user.paste_line_start(),
(pace | paste) line end: user.paste_line_end(),
(pace | paste) word: user.paste_word(),

# Duplication
clone that: edit.selection_clone(),
clone line: edit.line_clone(),

# Insert new line
new line above: edit.line_insert_up(),
new line below | slap: edit.line_insert_down(),

# Insert padding with optional symbols
(pad | padding): user.insert_between(" ", " "),
(pad | padding) <user.symbol_key>+:,
    insert(" ")
    user.insert_many(symbol_key_list)
    insert(" "),

# Undo/redo
undo that: edit.undo(),
redo that: edit.redo(),

# Save
file save: edit.save(),
file save all: edit.save_all(),

#browser
address bar | go address | go url: browser.focus_address(),
go page | page focus: browser.focus_page(),
address copy | url copy | copy address | copy url:
    browser.focus_address()
    sleep(50ms)
    edit.copy(),
go home: browser.go_home(),
[go] forward: browser.go_forward(),
go (back | backward): browser.go_back(),
go to {user.website}: browser.go(website),
go private: browser.open_private_window(),

bookmark it: browser.bookmark(),
bookmark tabs: browser.bookmark_tabs(),
(refresh | reload) it: browser.reload(),
(refresh | reload) it hard: browser.reload_hard(),

bookmark show: browser.bookmarks(),
bookmark bar [show]: browser.bookmarks_bar(),
downloads show: browser.show_downloads(),
extensions show: browser.show_extensions(),
history show: browser.show_history(),
cache show: browser.show_clear_cache(),
dev tools [show]: browser.toggle_dev_tools(),

#tabs
tab (open | new): app.tab_open(),
tab (last | previous): app.tab_previous(),
tab next: app.tab_next(),
tab close: user.tab_close_wrapper(),
tab (reopen | restore): app.tab_reopen(),
go tab <number>: user.tab_jump(number),
go tab final: user.tab_final(),
tab duplicate: user.tab_duplicate(),

#window management:
window (new | open): app.window_open(),
window next: app.window_next(),
window last: app.window_previous(),
window close: app.window_close(),
window hide: app.window_hide(),
focus <user.running_applications>: user.switcher_focus(running_applications),
# following only works on windows. Can't figure out how to make it work for mac. No idea what the equivalent for linux would be.
focus$: user.switcher_menu(),
focus last: user.switcher_focus_last(),
running list: user.switcher_toggle_running(),
running close: user.switcher_hide_running(),
launch <user.launch_applications>: user.switcher_launch(launch_applications),

snap <user.window_snap_position>: user.snap_window(window_snap_position),
snap next [screen]: user.move_window_next_screen(),
snap last [screen]: user.move_window_previous_screen(),
snap screen <number>: user.move_window_to_screen(number),
snap <user.running_applications> <user.window_snap_position>:
    user.snap_app(running_applications, window_snap_position),
snap <user.running_applications> [screen] <number>:
    user.move_app_to_screen(running_applications, number),

#text
phrase <user.text>$:
    user.add_phrase_to_history(text)
    insert(text),
phrase <user.text> over:
    user.add_phrase_to_history(text)
    insert(text),
{user.prose_formatter} <user.prose>$: user.insert_formatted(prose, prose_formatter),
{user.prose_formatter} <user.prose> over: user.insert_formatted(prose, prose_formatter),
<user.format_code>+$: user.insert_many(format_code_list),
<user.format_code>+ over: user.insert_many(format_code_list),
<user.formatters> that: user.formatters_reformat_selection(user.formatters),
word <user.word>:
    user.add_phrase_to_history(word)
    insert(word),
proud <user.word>: user.insert_formatted(word, "CAPITALIZE_FIRST_WORD"),
recent list: user.toggle_phrase_history(),
recent close: user.phrase_history_hide(),
recent repeat <number_small>:
    recent_phrase = user.get_recent_phrase(number_small)
    user.add_phrase_to_history(recent_phrase)
    insert(recent_phrase),
recent copy <number_small>: clip.set_text(user.get_recent_phrase(number_small)),
select that: user.select_last_phrase(),
before that: user.before_last_phrase(),
nope that | scratch that: user.clear_last_phrase(),
nope that was <user.formatters>: user.formatters_reformat_last(formatters),

#vscode
please [<user.text>]:
    user.vscode("workbench.action.showCommands")
    insert(user.text or "")

go view [<user.text>]:
    user.vscode("workbench.action.openView")
    insert(user.text or "")

# Sidebar
bar explore: user.vscode("workbench.view.explorer"),
bar extensions: user.vscode("workbench.view.extensions"),
bar outline: user.vscode("outline.focus"),
bar run: user.vscode("workbench.view.debug"),
bar search: user.vscode("workbench.view.search"),
bar source: user.vscode("workbench.view.scm"),
bar test: user.vscode("workbench.view.testing.focus"),
bar switch: user.vscode("workbench.action.toggleSidebarVisibility"),

# Symbol search
symbol hunt [<user.text>]:
    user.vscode("workbench.action.gotoSymbol")
    sleep(50ms)
    insert(text or ""),

symbol hunt all [<user.text>]:
    user.vscode("workbench.action.showAllSymbols")
    sleep(50ms)
    insert(text or ""),

# Panels
panel control: user.vscode("workbench.panel.repl.view.focus"),
panel output: user.vscode("workbench.panel.output.focus"),
panel problems: user.vscode("workbench.panel.markers.view.focus"),
panel switch: user.vscode("workbench.action.togglePanel"),
panel terminal: user.vscode("workbench.action.terminal.focus"),
focus editor: user.vscode("workbench.action.focusActiveEditorGroup"),

# Settings
show settings: user.vscode("workbench.action.openGlobalSettings"),
show settings json: user.vscode("workbench.action.openSettingsJson"),
show settings folder: user.vscode("workbench.action.openFolderSettings"),
show settings folder json: user.vscode("workbench.action.openFolderSettingsFile"),
show settings workspace: user.vscode("workbench.action.openWorkspaceSettings"),
show settings workspace json: user.vscode("workbench.action.openWorkspaceSettingsFile"),
show shortcuts: user.vscode("workbench.action.openGlobalKeybindings"),
show shortcuts json: user.vscode("workbench.action.openGlobalKeybindingsFile"),
show snippets: user.vscode("workbench.action.openSnippets"),

# VSCode Snippets
snip (last | previous): user.vscode("jumpToPrevSnippetPlaceholder"),
snip next: user.vscode("jumpToNextSnippetPlaceholder"),

# Display
centered switch: user.vscode("workbench.action.toggleCenteredLayout"),
fullscreen switch: user.vscode("workbench.action.toggleFullScreen"),
theme switch: user.vscode("workbench.action.selectTheme"),
wrap switch: user.vscode("editor.action.toggleWordWrap"),
zen switch: user.vscode("workbench.action.toggleZenMode"),

# File Commands
file hunt [<user.text>]:
    user.vscode("workbench.action.quickOpen")
    sleep(50ms)
    insert(text or ""),
file hunt (pace | paste):
    user.vscode("workbench.action.quickOpen")
    sleep(50ms)
    edit.paste(),
file copy name: user.vscode("fileutils.copyFileName"),
file copy path: user.vscode("copyFilePath"),
file copy local [path]: user.vscode("copyRelativeFilePath"),
file create sibling: user.vscode_and_wait("explorer.newFile"),
file create: user.vscode("workbench.action.files.newUntitledFile"),
file create relative: user.vscode("fileutils.newFile"),
file create root: user.vscode("fileutils.newFileAtRoot"),
file rename:
    user.vscode("fileutils.renameFile")
    sleep(150ms),
file move:
    user.vscode("fileutils.moveFile")
    sleep(150ms),
file clone:
    user.vscode("fileutils.duplicateFile")
    sleep(150ms),
file delete:
    user.vscode("fileutils.removeFile")
    sleep(150ms),
file open folder: user.vscode("revealFileInOS"),
file reveal: user.vscode("workbench.files.action.showActiveFileInExplorer"),
save ugly: user.vscode("workbench.action.files.saveWithoutFormatting"),

# Language Features
suggest show: user.vscode("editor.action.triggerSuggest"),
hint show: user.vscode("editor.action.triggerParameterHints"),
definition show: user.vscode("editor.action.revealDefinition"),
definition peek: user.vscode("editor.action.peekDefinition"),
definition side: user.vscode("editor.action.revealDefinitionAside"),
references show: user.vscode("editor.action.goToReferences"),
hierarchy peek: user.vscode("editor.showCallHierarchy"),
references find: user.vscode("references-view.find"),
format that: user.vscode("editor.action.formatDocument"),
format selection: user.vscode("editor.action.formatSelection"),
imports fix: user.vscode("editor.action.organizeImports"),
problem next: user.vscode("editor.action.marker.nextInFiles"),
problem last: user.vscode("editor.action.marker.prevInFiles"),
problem fix: user.vscode("problems.action.showQuickFixes"),
rename that: user.vscode("editor.action.rename"),
refactor that: user.vscode("editor.action.refactor"),
whitespace trim: user.vscode("editor.action.trimTrailingWhitespace"),
language switch: user.vscode("workbench.action.editor.changeLanguageMode"),
refactor rename: user.vscode("editor.action.rename"),
refactor this: user.vscode("editor.action.refactor"),

#code navigation
(go declaration | follow): user.vscode("editor.action.revealDefinition"),
go back: user.vscode("workbench.action.navigateBack"),
go forward: user.vscode("workbench.action.navigateForward"),
go implementation: user.vscode("editor.action.goToImplementation"),
go type: user.vscode("editor.action.goToTypeDefinition"),
go usage: user.vscode("references-view.find"),
go recent [<user.text>]:
    user.vscode("workbench.action.openRecent")
    sleep(50ms)
    insert(text or "")
    sleep(250ms),
go edit: user.vscode("workbench.action.navigateToLastEditLocation"),

# Bookmarks. Requires Bookmarks plugin
bar marks: user.vscode("workbench.view.extension.bookmarks"),
go marks:
    user.deprecate_command("2023-06-06", "go marks", "bar marks")
    user.vscode("workbench.view.extension.bookmarks"),
toggle mark: user.vscode("bookmarks.toggle"),
go next mark: user.vscode("bookmarks.jumpToNext"),
go last mark: user.vscode("bookmarks.jumpToPrevious"),

close other tabs: user.vscode("workbench.action.closeOtherEditors"),
close all tabs: user.vscode("workbench.action.closeAllEditors"),
close tabs way right: user.vscode("workbench.action.closeEditorsToTheRight"),
close tabs way left: user.vscode("workbench.action.closeEditorsToTheLeft"),

# Folding
fold that: user.vscode("editor.fold"),
unfold that: user.vscode("editor.unfold"),
fold those: user.vscode("editor.foldAllMarkerRegions"),
unfold those: user.vscode("editor.unfoldRecursively"),
fold all: user.vscode("editor.foldAll"),
unfold all: user.vscode("editor.unfoldAll"),
fold comments: user.vscode("editor.foldAllBlockComments"),
fold one: user.vscode("editor.foldLevel1"),
fold two: user.vscode("editor.foldLevel2"),
fold three: user.vscode("editor.foldLevel3"),
fold four: user.vscode("editor.foldLevel4"),
fold five: user.vscode("editor.foldLevel5"),
fold six: user.vscode("editor.foldLevel6"),
fold seven: user.vscode("editor.foldLevel7"),

# Git / Github (not using verb-noun-adjective pattern, mirroring terminal commands.)
git branch: user.vscode("git.branchFrom"),
git branch this: user.vscode("git.branch"),
git checkout [<user.text>]:
    user.vscode("git.checkout")
    sleep(50ms)
    insert(text or ""),
git commit [<user.text>]:
    user.vscode("git.commitStaged")
    sleep(100ms)
    user.insert_formatted(text or "", "CAPITALIZE_FIRST_WORD"),
git commit undo: user.vscode("git.undoCommit"),
git commit amend: user.vscode("git.commitStagedAmend"),
git diff: user.vscode("git.openChange"),
git fetch: user.vscode("git.fetch"),
git fetch all: user.vscode("git.fetchAll"),
git ignore: user.vscode("git.ignore"),
git merge: user.vscode("git.merge"),
git output: user.vscode("git.showOutput"),
git pull: user.vscode("git.pullRebase"),
git push: user.vscode("git.push"),
git push force: user.vscode("git.pushForce"),
git rebase abort: user.vscode("git.rebaseAbort"),
git reveal: user.vscode("git.revealInExplorer"),
git revert: user.vscode("git.revertChange"),
git stash: user.vscode("git.stash"),
git stash pop: user.vscode("git.stashPop"),
git status: user.vscode("workbench.scm.focus"),
git stage: user.vscode("git.stage"),
git stage all: user.vscode("git.stageAll"),
git sync: user.vscode("git.sync"),
git unstage: user.vscode("git.unstage"),
git unstage all: user.vscode("git.unstageAll"),
pull request: user.vscode("pr.create"),
# Use keyboard shortcuts because VSCode relies on when clause contexts to choose the appropriate
# action: https://code.visualstudio.com/api/references/when-clause-contexts
change next: key(alt-f5),
change last: key(shift-alt-f5),


# Terminal
terminal external: user.vscode("workbench.action.terminal.openNativeConsole"),
terminal new: user.vscode("workbench.action.terminal.new"),
terminal next: user.vscode("workbench.action.terminal.focusNext"),
terminal last: user.vscode("workbench.action.terminal.focusPrevious"),
terminal split: user.vscode("workbench.action.terminal.split"),
terminal zoom: user.vscode("workbench.action.toggleMaximizedPanel"),
terminal trash: user.vscode("workbench.action.terminal.kill"),
terminal toggle: user.vscode_and_wait("workbench.action.terminal.toggleTerminal"),
terminal scroll up: user.vscode("workbench.action.terminal.scrollUp"),
terminal scroll down: user.vscode("workbench.action.terminal.scrollDown"),
terminal <number_small>: user.vscode_terminal(number_small),